name: Create new DAR project repo

on:
  workflow_dispatch:
    inputs:
        new_repository_name:
            description: The name of the new DAR repository
            type: string
            required: true
  push:
    branches:
      - ondemand
env:
    GH_TOKEN: ${{ secrets.GH_PAT }}

jobs:
  create-gh-teams:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Check for existing GH Contributor Team
        id: team-check-contributor
        run: |
          ORG=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
          REPO_NAME="${{ inputs.new_repository_name }}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ORG=$ORG" >> $GITHUB_ENV

          TEAM_NAME="$REPO_NAME-contributor"
          if gh api /orgs/$ORG/teams/$TEAM_NAME > /dev/null 2>&1; then
            echo "team_present=true" >> $GITHUB_OUTPUT
            echo "::notice::Found Team $TEAM_NAME. Skipping creation..."
          else
            echo "team_present=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GH Contributor Team
        if: steps.team-check-contributor.outputs.team_present == 'false'
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/$ORG/teams \
            -f "name=$REPO_NAME-contributor" -f "description=Team for contributor members for project $REPO_NAME" -f "permission=push" -f "notification_setting=notifications_enabled" -f "privacy=closed"
      
      - name: Check for existing GH approver Team
        id: team-check-approver
        run: |
          TEAM_NAME="$REPO_NAME-approver"
          if gh api /orgs/$ORG/teams/$TEAM_NAME > /dev/null 2>&1; then
            echo "team_present=true" >> $GITHUB_OUTPUT
            echo "::notice::Found Team $TEAM_NAME. Skipping creation..."
          else
            echo "team_present=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GH approver Team
        if: steps.team-check-approver.outputs.team_present == 'false'
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/$ORG/teams \
            -f "name=$REPO_NAME-approver" -f "description=Team for approver members for project $REPO_NAME" -f "permission=push" -f "notification_setting=notifications_enabled" -f "privacy=closed"
    
  create-repo:
    runs-on: ubuntu-latest
    needs: create-gh-teams

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Check for existing repo
        id: repo-check
        run: |
          ORG=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
          REPO_NAME="${{ inputs.new_repository_name }}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ORG=$ORG" >> $GITHUB_ENV      
          
          if ! gh repo view "$ORG/$REPO_NAME" > /dev/null 2>&1; then
            echo "::notice::Repository $REPO_NAME doesn't exist. Creating the repository first..."
            echo "repo_present=false" >> $GITHUB_OUTPUT
          else
            echo "repo_present=true" >> $GITHUB_OUTPUT
            echo "::notice::Found Repository $REPO_NAME. Exiting..."
            exit 1
          fi

      - name: Create repo
        run: |
          gh repo create "$ORG/$REPO_NAME" --public --team $REPO_NAME-contributor \
            --description "Data Access Request repository for project $REPO_NAME"
          echo "::notice::Created repository $REPO_NAME"

          # Set id for git commit
          git config --global user.name "LSCSDE Governance Actions"
          git config --global user.email "lscsde-actions@github.com"

      - name: Cr8tor Env
        run: |
          wget -qO- https://astral.sh/uv/install.sh | sh
          export PATH=$HOME/.local/bin:$PATH
          git clone -b pzm-add-orchestration-feature https://github.com/lsc-sde-crates/cr8tor.git
          uv sync --directory cr8tor

      - name: Run cr8tor CLI
        run: |
          source cr8tor/.venv/bin/activate
          cr8tor init -t https://github.com/lsc-sde-crates/cr8tor/tree/pzm-add-orchestration-feature --project-name $REPO_NAME

      - name: Initialize and push empty main branch
        run: |
          cd $REPO_NAME 
          git init
          git remote add origin "https://$GH_TOKEN@github.com/$ORG/$REPO_NAME.git"
          git commit --allow-empty -m "Initial empty commit"
          git branch -M main
          git push -u origin main

      - name: Update protect_main.json file
        run: |
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/newbranch2/branch_rules/protect_main.json
          jq --arg ORG "$ORG" --arg REPO_NAME "$REPO_NAME" '.source = "\($ORG)/\($REPO_NAME)"' protect_main.json > protect_main_insert.json

      - name: Apply rule set for $REPO_NAME
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$ORG/$REPO_NAME/rulesets \
            --input protect_main_insert.json